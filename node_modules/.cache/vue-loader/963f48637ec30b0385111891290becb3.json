{"remainingRequest":"/home/october/Documents/code/kipekee-front/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/october/Documents/code/kipekee-front/src/components/AutoList.vue?vue&type=style&index=0&id=5059227c&lang=scss&scoped=true","dependencies":[{"path":"/home/october/Documents/code/kipekee-front/src/components/AutoList.vue","mtime":1637002237188},{"path":"/home/october/Documents/code/kipekee-front/node_modules/css-loader/dist/cjs.js","mtime":1630502847564},{"path":"/home/october/Documents/code/kipekee-front/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1616796459000},{"path":"/home/october/Documents/code/kipekee-front/node_modules/postcss-loader/src/index.js","mtime":1630502853892},{"path":"/home/october/Documents/code/kipekee-front/node_modules/sass-loader/dist/cjs.js","mtime":1630502879448},{"path":"/home/october/Documents/code/kipekee-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/october/Documents/code/kipekee-front/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICBAaW1wb3J0ICcuLi9hc3NldHMvc2Nzcy9sYXlvdXQvX2xpc3RzLnNjc3MnOwo="},{"version":3,"sources":["/home/october/Documents/code/kipekee-front/src/components/AutoList.vue"],"names":[],"mappings":";IA2GI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/october/Documents/code/kipekee-front/src/components/AutoList.vue","sourceRoot":"","sourcesContent":["<template>\n    <section-title v-if=\"title.status == true\" :title=title.title :actions=title.actions></section-title>\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"input-group mb-3\">\n                <form action=\"#\" @submit.prevent=\"fetchResults()\" style=\"width: inherit\">\n                    <div class=\"input-group mb-3\">\n                        <input type=\"text\" class=\"form-control search\" v-model=\"search\" placeholder=\"Search through system.\" aria-label=\"search\" aria-describedby=\"search-submit\">\n\n                        <span class=\"input-group-text search-icon\" id=\"search-submit\">\n                            <button class=\"btn btn-transparent\" type=\"submit\">\n                                <font-awesome-icon class=\"icon\" :icon=\"['fa', 'search']\" /> \n                            </button>\n                        </span>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n    \n    <div id=\"tables\" class=\"row\">\n        <div class=\"col-md-12\">\n            <small class=\"text-muted fw-bold\">+{{ totals }} total</small>\n            <small class=\"text-muted float-end fw-bold\">{{ screen }} records showing</small>\n            \n            <table id=\"table\" class=\"table table-striped mt-2\">\n                <thead class=\"table-dark\">\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th v-for=\"(header, index) in headers\" :key=\"index\" scope=\"col\">\n                            <span class=\"text-capitalize\">{{ header }}</span>\n                        </th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"(item, index) in data\" :key=\"index\">\n                        <th scope=\"row\">{{ index + 1 }}</th>\n                        <td v-for=\"(header, index) in headers\" :key=\"index\">{{\n                            item[header] }}</td>\n\n                        <td class=\"dropdown\">\n                            <font-awesome-icon :icon=\"['fas', 'ellipsis-h']\" class=\"dropdown-toggle\" type=\"button\" id=\"dropdownMenu\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"></font-awesome-icon>\n\n                            <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu\">\n                                <li v-for=\"({name, action_url, type}, index) in all_screens[screen-1].actions\" :key=\"index\">\n                                    <a class=\"dropdown-item\" v-if=\"type == 'api'\" @click=\"autoAPI(action_url)\">{{ name }}</a>\n\n                                    <a class=\"dropdown-item\" v-if=\"type == 'modal'\" data-bs-toggle=\"modal\" :data-bs-target=\"'#' + action_url\">{{ name }}</a>\n                                </li>\n                            </ul>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    \n    <div id=\"cards\" class=\"row mb-3\">\n        <div class=\"col-md-12\">\n            <small class=\"text-muted fw-bold\">+{{ totals }} total</small>\n            <small class=\"text-muted float-end fw-bold\">{{ totals }} records found.</small>\n        </div>\n\n        <div class=\"col-md-6 mt-3\" v-for=\"(item, index) in data\" :key=\"index\">\n            <div class=\"card mb-2 border-0\">\n                <div class=\"card-body pb-0\">\n                    <p class=\"text-dark fw-bold\">{{ index + 1 }}. </p>\n                    <p class=\"text-dark mb-3\" v-for=\"(header, index) in headers\" :key=\"index\"> <span class=\"fw-bold text-uppercase\">{{ header }}: </span> {{ item[header] }}</p>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row navigation\">\n        <div class=\"col-12 d-flex\">\n            <div class=\"mx-auto\">\n                <button class=\"btn default btn-sm me-2\" @click=\"start()\" :disabled=\"hidePrevious\">\n                    <span class=\"mx-1\">Start <font-awesome-icon class=\"icon ms-2\" :icon=\"['fa', 'step-backward']\" /></span>\n                </button>\n\n                <button class=\"btn default btn-sm me-2\" id=\"previous\" @click='previous()' :disabled=\"hidePrevious\">\n                    <font-awesome-icon class=\"icon me-2\" :icon=\"['fa', 'caret-left']\" /> Previous\n                </button>\n\n                <span>\n                    ||\n                </span>\n\n                <button class=\"btn default btn-sm ms-2 me-2\" id=\"next\" @click='next()' :disabled=\"hideNext\">\n                    Next\n                    <font-awesome-icon class=\"icon ms-2\" :icon=\"['fa', 'caret-right']\" />\n                </button>\n\n                <button class=\"btn default btn-sm me-2\" @click=\"end()\" :disabled=\"hideNext\">\n                    <span class=\"mx-1\">End <font-awesome-icon class=\"icon ms-2\" :icon=\"['fa', 'step-forward']\" /></span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <form-component></form-component>\n\n</template>\n\n<style lang=\"scss\" scoped>\n    @import '../assets/scss/layout/_lists.scss';\n</style>\n\n<script>\nimport FormComponent from '../components/Form';\nimport SectionTitle from'../components/SectionTitle';\n\nexport default {\n    name: 'AutoList',\n    props: {\n        title: {\n            type: Object,\n            required: true\n        },\n        url: {\n            type: String,\n            required: true\n        },\n        all_screens: {\n            required: true,\n            type: Object\n        },\n        screen: {\n            required: true,\n            type: Number\n        },\n        list_data: {\n            required: true,\n            type: Array\n        }\n    },\n    components: {\n        FormComponent,\n        SectionTitle\n    },\n    mounted() {\n        this.getDatabyPage()\n    },\n    data (){\n        return {\n            error: [],\n            page: 0,\n            limit: 25,\n            totals: '',\n            data: [],\n            current_limit: 25,\n            hidePrevious: true,\n            hideNext: false,\n            max: 0,\n            search: '',\n            awaitingSearch: false,\n            headers: []\n        }\n    },\n    watch: {\n        url: function() {\n            this.getDatabyPage()\n        }\n    },\n    methods: {\n        getDatabyPage() {\n            this.axios.get(this.url + '?size=' + this.limit + '&page=' + this.page).then((response) => {\n                this.data = response.data.data\n                this.headers = response.data.headers\n                this.totals = response.data.data.length\n                this.$emit('update:list_data', this.data)\n            }).catch((error) => {\n                this.error = error.response.data\n            })\n        }\n    }\n}\n</script>"]}]}