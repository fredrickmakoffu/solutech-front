{"remainingRequest":"/home/october/Documents/code/solutech/front/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/october/Documents/code/solutech/front/src/components/Modal/OrderModal.vue?vue&type=style&index=0&id=1c8dd871&lang=scss&scoped=true","dependencies":[{"path":"/home/october/Documents/code/solutech/front/src/components/Modal/OrderModal.vue","mtime":1648651216398},{"path":"/home/october/Documents/code/solutech/front/node_modules/css-loader/dist/cjs.js","mtime":1630502847564},{"path":"/home/october/Documents/code/solutech/front/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1616796459000},{"path":"/home/october/Documents/code/solutech/front/node_modules/postcss-loader/src/index.js","mtime":1630502853892},{"path":"/home/october/Documents/code/solutech/front/node_modules/sass-loader/dist/cjs.js","mtime":1630502879448},{"path":"/home/october/Documents/code/solutech/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/october/Documents/code/solutech/front/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICBAaW1wb3J0ICcuLi8uLi9hc3NldHMvc2Nzcy9oZWxwZXJzL19icmVha3BvaW50cy5zY3NzJzsKICAgIEBpbXBvcnQgJy4uLy4uL2Fzc2V0cy9zY3NzL2xheW91dC9fbGlzdHMuc2Nzcyc7CgogICAgI3RhYmxlcyB7CiAgICAgICAgQGluY2x1ZGUgbWVkaWEoIjw9bGFwdG9wIikgewogICAgICAgICAgICBkaXNwbGF5OiBibG9jazsKICAgICAgICB9CiAgICB9Cg=="},{"version":3,"sources":["/home/october/Documents/code/solutech/front/src/components/Modal/OrderModal.vue"],"names":[],"mappings":";IA6DI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAClB;IACJ","file":"/home/october/Documents/code/solutech/front/src/components/Modal/OrderModal.vue","sourceRoot":"","sourcesContent":["<template>\n    <!-- Modal -->\n    <div class=\"modal fade\" id=\"order\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"formsLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\" role=\"document\">\n            <div class=\"modal-content\">\n                <div id=\"modal-header\" class=\"modal-header pb-0 border-0\">\n                    <span class=\"d-block\">\n                        <h5 class=\"content-title-min\">Order Details</h5>\n                        <small class=\"text-muted\">Create an order</small>\n                    </span>\n                </div>\n                            \n                <div class=\"modal-body\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12 col-sm-12\">\n                            <span id=\"status\"></span>\n                            <status v-model:status_data=status_data></status>\n\n                            <no-data v-if=\" !items.length\" :message=\"'No items found.'\"></no-data>\n\n                            <div id=\"tables\" class=\"row mt-4\"> \n                                <div class=\"col-md-12\">\n                                    <small class=\"text-muted float-end me-3 fw-bold mb-2\">{{ items.length }} records showing</small>\n\n                                    <table id=\"table\" class=\"table table-striped mt-2\">\n                                        <thead class=\"table-dark\">\n                                            <tr>\n                                                <th scope=\"col\">#</th>\n                                                <th scope=\"col\">Name</th>\n                                            </tr>\n                                        </thead>\n\n                                        <tbody>\n                                            <tr v-for=\"({ name, id }, index) in items\" :key=\"index\" @click=\"addItem(id, $event.currentTarget)\">\n                                                <th scope=\"row\">{{ index + 1 }} </th>\n                                                <td class=\"d-flex\">\n                                                    <span>{{ name }}</span>\n                                                    <span class=\"ms-auto me-4 checked d-none\">\n                                                        <font-awesome-icon class=\"text-success\" :icon=\"['fa', 'check-circle']\"></font-awesome-icon>\n                                                    </span>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n\n                        </div>\n                        <div class=\"col-12\">\n                            <button class=\"btn btn-success\" @click=\"createOrder()\">\n                                Create order\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<style lang=\"scss\" scoped>\n    @import '../../assets/scss/helpers/_breakpoints.scss';\n    @import '../../assets/scss/layout/_lists.scss';\n\n    #tables {\n        @include media(\"<=laptop\") {\n            display: block;\n        }\n    }\n</style>\n\n<script>\nimport Status from '../../components/Status';\nimport NoData from '../../components/NoData';\n\nexport default {\n    name: 'OrderModal',\n    props: ['orders'],\n    components: {\n        Status,\n        NoData\n    },\n    data() {\n        return {\n            data: {\n                order_items: [],\n            },\n            status_data: {\n                success: false,\n                success_message: null, \n                error: false,\n                error_message: null,\n                loading: false\n            },\n            items: [],\n            item: null\n        }\n    },\n    mounted() {\n        this.getItems()\n    },\n    methods: {\n        addItem(id, event) {\n            if(event.querySelector('.checked').classList.contains('d-none')) {\n                \n                this.data.order_items.push({\n                    item_id: id\n                })\n\n                event.querySelector('.checked').classList.remove('d-none')\n            } else {\n                let i = 0\n                \n                this.data.order_items.forEach(element => {\n                    if(id == element['item_id']) {\n                        this.data.order_items.splice(i, 1) \n                    }\n\n                    i++\n                });\n\n                event.querySelector('.checked').classList.add('d-none')\n            }\n        },\n        createOrder() {\n            this.axios.post('api/orders/', this.data.order_items).then(() => {\n                document.getElementById('status').scrollIntoView({behavior: 'smooth'})\n\n                this.status_data.loading = false\n                this.status_data.error = false\n                this.status_data.success = true\n                this.status_data.success_message = 'Success!'\n\n                setTimeout(() => {\n                    this.status_data.success = false\n                }, 1500);\n\n                this.getOrders()          \n            }).catch((error) => {\n                document.getElementById('status').scrollIntoView({behavior: 'smooth'})\n\n                this.status_data.loading = false\n                this.status_data.error = true\n                this.status_data.success = false\n                this.status_data.error_message = error.message\n            })                      \n        },\n        getOrders() {\n            this.axios.get('api/orders').then(response => {\n                this.$emit('update:orders', response.data.data)\n            })\n        },\n        getItems() {\n            this.axios.get('api/items').then(response => {\n                this.items = response.data.data\n            })\n        }\n    }\n}\n</script>"]}]}